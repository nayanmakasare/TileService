// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: TileService.proto

package TileService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TileService service

type TileService interface {
	GetMovieTiles(ctx context.Context, in *RowId, opts ...client.CallOption) (TileService_GetMovieTilesService, error)
	InitializingEngine(ctx context.Context, in *InitializingEngineRequest, opts ...client.CallOption) (*InitializingEngineResponse, error)
	GetRows(ctx context.Context, in *GetRowsRequest, opts ...client.CallOption) (TileService_GetRowsService, error)
}

type tileService struct {
	c    client.Client
	name string
}

func NewTileService(name string, c client.Client) TileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "TileService"
	}
	return &tileService{
		c:    c,
		name: name,
	}
}

func (c *tileService) GetMovieTiles(ctx context.Context, in *RowId, opts ...client.CallOption) (TileService_GetMovieTilesService, error) {
	req := c.c.NewRequest(c.name, "TileService.GetMovieTiles", &RowId{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &tileServiceGetMovieTiles{stream}, nil
}

type TileService_GetMovieTilesService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*MovieTile, error)
}

type tileServiceGetMovieTiles struct {
	stream client.Stream
}

func (x *tileServiceGetMovieTiles) Close() error {
	return x.stream.Close()
}

func (x *tileServiceGetMovieTiles) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tileServiceGetMovieTiles) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tileServiceGetMovieTiles) Recv() (*MovieTile, error) {
	m := new(MovieTile)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tileService) InitializingEngine(ctx context.Context, in *InitializingEngineRequest, opts ...client.CallOption) (*InitializingEngineResponse, error) {
	req := c.c.NewRequest(c.name, "TileService.InitializingEngine", in)
	out := new(InitializingEngineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tileService) GetRows(ctx context.Context, in *GetRowsRequest, opts ...client.CallOption) (TileService_GetRowsService, error) {
	req := c.c.NewRequest(c.name, "TileService.GetRows", &GetRowsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &tileServiceGetRows{stream}, nil
}

type TileService_GetRowsService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*RowSpec, error)
}

type tileServiceGetRows struct {
	stream client.Stream
}

func (x *tileServiceGetRows) Close() error {
	return x.stream.Close()
}

func (x *tileServiceGetRows) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tileServiceGetRows) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tileServiceGetRows) Recv() (*RowSpec, error) {
	m := new(RowSpec)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TileService service

type TileServiceHandler interface {
	GetMovieTiles(context.Context, *RowId, TileService_GetMovieTilesStream) error
	InitializingEngine(context.Context, *InitializingEngineRequest, *InitializingEngineResponse) error
	GetRows(context.Context, *GetRowsRequest, TileService_GetRowsStream) error
}

func RegisterTileServiceHandler(s server.Server, hdlr TileServiceHandler, opts ...server.HandlerOption) error {
	type tileService interface {
		GetMovieTiles(ctx context.Context, stream server.Stream) error
		InitializingEngine(ctx context.Context, in *InitializingEngineRequest, out *InitializingEngineResponse) error
		GetRows(ctx context.Context, stream server.Stream) error
	}
	type TileService struct {
		tileService
	}
	h := &tileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TileService{h}, opts...))
}

type tileServiceHandler struct {
	TileServiceHandler
}

func (h *tileServiceHandler) GetMovieTiles(ctx context.Context, stream server.Stream) error {
	m := new(RowId)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TileServiceHandler.GetMovieTiles(ctx, m, &tileServiceGetMovieTilesStream{stream})
}

type TileService_GetMovieTilesStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MovieTile) error
}

type tileServiceGetMovieTilesStream struct {
	stream server.Stream
}

func (x *tileServiceGetMovieTilesStream) Close() error {
	return x.stream.Close()
}

func (x *tileServiceGetMovieTilesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tileServiceGetMovieTilesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tileServiceGetMovieTilesStream) Send(m *MovieTile) error {
	return x.stream.Send(m)
}

func (h *tileServiceHandler) InitializingEngine(ctx context.Context, in *InitializingEngineRequest, out *InitializingEngineResponse) error {
	return h.TileServiceHandler.InitializingEngine(ctx, in, out)
}

func (h *tileServiceHandler) GetRows(ctx context.Context, stream server.Stream) error {
	m := new(GetRowsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TileServiceHandler.GetRows(ctx, m, &tileServiceGetRowsStream{stream})
}

type TileService_GetRowsStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*RowSpec) error
}

type tileServiceGetRowsStream struct {
	stream server.Stream
}

func (x *tileServiceGetRowsStream) Close() error {
	return x.stream.Close()
}

func (x *tileServiceGetRowsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *tileServiceGetRowsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *tileServiceGetRowsStream) Send(m *RowSpec) error {
	return x.stream.Send(m)
}
